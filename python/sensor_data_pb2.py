# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sensor_data.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='sensor_data.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x11sensor_data.proto\"\x18\n\x07\x43\x65lsius\x12\r\n\x05value\x18\x01 \x01(\x01\"\x1d\n\x0cHectopascals\x12\r\n\x05value\x18\x01 \x01(\r\"\x17\n\x06Meters\x12\r\n\x05value\x18\x01 \x01(\x11\" \n\x0fMetersPerSecond\x12\r\n\x05value\x18\x01 \x01(\x01\" \n\x0fPartsPerBillion\x12\r\n\x05value\x18\x01 \x01(\r\" \n\x0fPartsPerMillion\x12\r\n\x05value\x18\x01 \x01(\r\"\x18\n\x07Percent\x12\r\n\x05value\x18\x01 \x01(\r\"\x18\n\x07Radians\x12\r\n\x05value\x18\x01 \x01(\x01\"\xc9\x01\n\x06Sensor\x12\x0c\n\x04uuid\x18\x01 \x01(\t\x12\'\n\x0bsensor_type\x18\x02 \x01(\x0e\x32\x12.Sensor.SensorType\"\x87\x01\n\nSensorType\x12\x0b\n\x07\x44\x45\x46\x41ULT\x10\x00\x12\x0c\n\x08\x41LTITUDE\x10\x01\x12\x0e\n\nANEMOMETER\x10\x02\x12\x12\n\x0e\x45QUIVALENT_CO2\x10\x03\x12\x0c\n\x08HUMIDITY\x10\x04\x12\x0c\n\x08PRESSURE\x10\x05\x12\x0f\n\x0bTEMPERATURE\x10\x06\x12\r\n\tTOTAL_VOC\x10\x07\"\xe2\x02\n\x0bMeasurement\x12\x0c\n\x04time\x18\x01 \x01(\x04\x12\x1f\n\x0btemperature\x18\x02 \x01(\x0b\x32\x08.CelsiusH\x00\x12!\n\x08pressure\x18\x03 \x01(\x0b\x32\r.HectopascalsH\x00\x12\x1b\n\x08\x61ltitude\x18\x04 \x01(\x0b\x32\x07.MetersH\x00\x12&\n\nwind_speed\x18\x05 \x01(\x0b\x32\x10.MetersPerSecondH\x00\x12&\n\ntotal_vocs\x18\x06 \x01(\x0b\x32\x10.PartsPerBillionH\x00\x12*\n\x0e\x65quivalent_co2\x18\x07 \x01(\x0b\x32\x10.PartsPerMillionH\x00\x12\x1c\n\x08humidity\x18\x08 \x01(\x0b\x32\x08.PercentH\x00\x12\"\n\x0ewind_direction\x18\t \x01(\x0b\x32\x08.RadiansH\x00\x12\x17\n\x06sensor\x18\n \x01(\x0b\x32\x07.SensorB\r\n\x0bmeasurementb\x06proto3')
)



_SENSOR_SENSORTYPE = _descriptor.EnumDescriptor(
  name='SensorType',
  full_name='Sensor.SensorType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DEFAULT', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALTITUDE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ANEMOMETER', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EQUIVALENT_CO2', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HUMIDITY', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PRESSURE', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TEMPERATURE', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TOTAL_VOC', index=7, number=7,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=324,
  serialized_end=459,
)
_sym_db.RegisterEnumDescriptor(_SENSOR_SENSORTYPE)


_CELSIUS = _descriptor.Descriptor(
  name='Celsius',
  full_name='Celsius',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Celsius.value', index=0,
      number=1, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=21,
  serialized_end=45,
)


_HECTOPASCALS = _descriptor.Descriptor(
  name='Hectopascals',
  full_name='Hectopascals',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Hectopascals.value', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=47,
  serialized_end=76,
)


_METERS = _descriptor.Descriptor(
  name='Meters',
  full_name='Meters',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Meters.value', index=0,
      number=1, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=78,
  serialized_end=101,
)


_METERSPERSECOND = _descriptor.Descriptor(
  name='MetersPerSecond',
  full_name='MetersPerSecond',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='MetersPerSecond.value', index=0,
      number=1, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=103,
  serialized_end=135,
)


_PARTSPERBILLION = _descriptor.Descriptor(
  name='PartsPerBillion',
  full_name='PartsPerBillion',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='PartsPerBillion.value', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=137,
  serialized_end=169,
)


_PARTSPERMILLION = _descriptor.Descriptor(
  name='PartsPerMillion',
  full_name='PartsPerMillion',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='PartsPerMillion.value', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=171,
  serialized_end=203,
)


_PERCENT = _descriptor.Descriptor(
  name='Percent',
  full_name='Percent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Percent.value', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=205,
  serialized_end=229,
)


_RADIANS = _descriptor.Descriptor(
  name='Radians',
  full_name='Radians',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Radians.value', index=0,
      number=1, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=231,
  serialized_end=255,
)


_SENSOR = _descriptor.Descriptor(
  name='Sensor',
  full_name='Sensor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuid', full_name='Sensor.uuid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='sensor_type', full_name='Sensor.sensor_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SENSOR_SENSORTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=258,
  serialized_end=459,
)


_MEASUREMENT = _descriptor.Descriptor(
  name='Measurement',
  full_name='Measurement',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='time', full_name='Measurement.time', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='temperature', full_name='Measurement.temperature', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='pressure', full_name='Measurement.pressure', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='altitude', full_name='Measurement.altitude', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='wind_speed', full_name='Measurement.wind_speed', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='total_vocs', full_name='Measurement.total_vocs', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='equivalent_co2', full_name='Measurement.equivalent_co2', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='humidity', full_name='Measurement.humidity', index=7,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='wind_direction', full_name='Measurement.wind_direction', index=8,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='sensor', full_name='Measurement.sensor', index=9,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='measurement', full_name='Measurement.measurement',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=462,
  serialized_end=816,
)

_SENSOR.fields_by_name['sensor_type'].enum_type = _SENSOR_SENSORTYPE
_SENSOR_SENSORTYPE.containing_type = _SENSOR
_MEASUREMENT.fields_by_name['temperature'].message_type = _CELSIUS
_MEASUREMENT.fields_by_name['pressure'].message_type = _HECTOPASCALS
_MEASUREMENT.fields_by_name['altitude'].message_type = _METERS
_MEASUREMENT.fields_by_name['wind_speed'].message_type = _METERSPERSECOND
_MEASUREMENT.fields_by_name['total_vocs'].message_type = _PARTSPERBILLION
_MEASUREMENT.fields_by_name['equivalent_co2'].message_type = _PARTSPERMILLION
_MEASUREMENT.fields_by_name['humidity'].message_type = _PERCENT
_MEASUREMENT.fields_by_name['wind_direction'].message_type = _RADIANS
_MEASUREMENT.fields_by_name['sensor'].message_type = _SENSOR
_MEASUREMENT.oneofs_by_name['measurement'].fields.append(
  _MEASUREMENT.fields_by_name['temperature'])
_MEASUREMENT.fields_by_name['temperature'].containing_oneof = _MEASUREMENT.oneofs_by_name['measurement']
_MEASUREMENT.oneofs_by_name['measurement'].fields.append(
  _MEASUREMENT.fields_by_name['pressure'])
_MEASUREMENT.fields_by_name['pressure'].containing_oneof = _MEASUREMENT.oneofs_by_name['measurement']
_MEASUREMENT.oneofs_by_name['measurement'].fields.append(
  _MEASUREMENT.fields_by_name['altitude'])
_MEASUREMENT.fields_by_name['altitude'].containing_oneof = _MEASUREMENT.oneofs_by_name['measurement']
_MEASUREMENT.oneofs_by_name['measurement'].fields.append(
  _MEASUREMENT.fields_by_name['wind_speed'])
_MEASUREMENT.fields_by_name['wind_speed'].containing_oneof = _MEASUREMENT.oneofs_by_name['measurement']
_MEASUREMENT.oneofs_by_name['measurement'].fields.append(
  _MEASUREMENT.fields_by_name['total_vocs'])
_MEASUREMENT.fields_by_name['total_vocs'].containing_oneof = _MEASUREMENT.oneofs_by_name['measurement']
_MEASUREMENT.oneofs_by_name['measurement'].fields.append(
  _MEASUREMENT.fields_by_name['equivalent_co2'])
_MEASUREMENT.fields_by_name['equivalent_co2'].containing_oneof = _MEASUREMENT.oneofs_by_name['measurement']
_MEASUREMENT.oneofs_by_name['measurement'].fields.append(
  _MEASUREMENT.fields_by_name['humidity'])
_MEASUREMENT.fields_by_name['humidity'].containing_oneof = _MEASUREMENT.oneofs_by_name['measurement']
_MEASUREMENT.oneofs_by_name['measurement'].fields.append(
  _MEASUREMENT.fields_by_name['wind_direction'])
_MEASUREMENT.fields_by_name['wind_direction'].containing_oneof = _MEASUREMENT.oneofs_by_name['measurement']
DESCRIPTOR.message_types_by_name['Celsius'] = _CELSIUS
DESCRIPTOR.message_types_by_name['Hectopascals'] = _HECTOPASCALS
DESCRIPTOR.message_types_by_name['Meters'] = _METERS
DESCRIPTOR.message_types_by_name['MetersPerSecond'] = _METERSPERSECOND
DESCRIPTOR.message_types_by_name['PartsPerBillion'] = _PARTSPERBILLION
DESCRIPTOR.message_types_by_name['PartsPerMillion'] = _PARTSPERMILLION
DESCRIPTOR.message_types_by_name['Percent'] = _PERCENT
DESCRIPTOR.message_types_by_name['Radians'] = _RADIANS
DESCRIPTOR.message_types_by_name['Sensor'] = _SENSOR
DESCRIPTOR.message_types_by_name['Measurement'] = _MEASUREMENT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Celsius = _reflection.GeneratedProtocolMessageType('Celsius', (_message.Message,), dict(
  DESCRIPTOR = _CELSIUS,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Celsius)
  ))
_sym_db.RegisterMessage(Celsius)

Hectopascals = _reflection.GeneratedProtocolMessageType('Hectopascals', (_message.Message,), dict(
  DESCRIPTOR = _HECTOPASCALS,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Hectopascals)
  ))
_sym_db.RegisterMessage(Hectopascals)

Meters = _reflection.GeneratedProtocolMessageType('Meters', (_message.Message,), dict(
  DESCRIPTOR = _METERS,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Meters)
  ))
_sym_db.RegisterMessage(Meters)

MetersPerSecond = _reflection.GeneratedProtocolMessageType('MetersPerSecond', (_message.Message,), dict(
  DESCRIPTOR = _METERSPERSECOND,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:MetersPerSecond)
  ))
_sym_db.RegisterMessage(MetersPerSecond)

PartsPerBillion = _reflection.GeneratedProtocolMessageType('PartsPerBillion', (_message.Message,), dict(
  DESCRIPTOR = _PARTSPERBILLION,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:PartsPerBillion)
  ))
_sym_db.RegisterMessage(PartsPerBillion)

PartsPerMillion = _reflection.GeneratedProtocolMessageType('PartsPerMillion', (_message.Message,), dict(
  DESCRIPTOR = _PARTSPERMILLION,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:PartsPerMillion)
  ))
_sym_db.RegisterMessage(PartsPerMillion)

Percent = _reflection.GeneratedProtocolMessageType('Percent', (_message.Message,), dict(
  DESCRIPTOR = _PERCENT,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Percent)
  ))
_sym_db.RegisterMessage(Percent)

Radians = _reflection.GeneratedProtocolMessageType('Radians', (_message.Message,), dict(
  DESCRIPTOR = _RADIANS,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Radians)
  ))
_sym_db.RegisterMessage(Radians)

Sensor = _reflection.GeneratedProtocolMessageType('Sensor', (_message.Message,), dict(
  DESCRIPTOR = _SENSOR,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Sensor)
  ))
_sym_db.RegisterMessage(Sensor)

Measurement = _reflection.GeneratedProtocolMessageType('Measurement', (_message.Message,), dict(
  DESCRIPTOR = _MEASUREMENT,
  __module__ = 'sensor_data_pb2'
  # @@protoc_insertion_point(class_scope:Measurement)
  ))
_sym_db.RegisterMessage(Measurement)


# @@protoc_insertion_point(module_scope)
